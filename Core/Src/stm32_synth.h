#include <stdint.h>
/*
 * DMA calls to move 32bits per clock
 * using uint16_t sends 2 at once
 * using uint8_t to send 4 at once
 * the DAC splits the sine wave vertically using either an 8bit or 12bit integer
 * the size of the sample can only be as accurate as the sample is split vertically
 *
 * 8bit is 256, so 64 32bit buffers
 * 12bit is 4096, so 2048 32bit buffers
 *
 * probably should at least have 10 points per period, otherwise a sine is just a triangle
 * sample rate of 2x the highest frequency to be played is good enough to
 * remove most distortion
 */

#define SAMPLES_PER_PERIOD 32
#define BUFFERS_PER_PERIOD 608
#define SIZE_OF_SAMPLE 128
//SIZE_OF_BUFFER = SIZE_OF_SAMPLE * freqmultiplier of slowest note;
#define SIZE_OF_BUFFER 4096
uint8_t playbackRate = SAMPLES_PER_PERIOD;
uint8_t buffer0[SIZE_OF_BUFFER] = { 0 };
uint8_t buffer1[SIZE_OF_BUFFER] = { 0 };
uint8_t* currentBuffer=buffer0;

// lookup tables
uint8_t sine[] = {
	   7,    7,    8,    8,    9,   11,   12,   14,
	  16,   18,   21,   23,   26,   30,   33,   37,
	  41,   45,   49,   53,   58,   63,   68,   73,
	  78,   83,   88,   93,   99,  104,  110,  115,
	 121,  126,  132,  137,  143,  148,  154,  159,
	 164,  169,  174,  178,  183,  187,  192,  196,
	 200,  203,  207,  210,  213,  216,  218,  221,
	 223,  224,  226,  227,  228,  229,  229,  229,
	 229,  229,  229,  228,  227,  226,  224,  223,
	 221,  218,  216,  213,  210,  207,  203,  200,
	 196,  192,  187,  183,  178,  174,  169,  164,
	 159,  154,  148,  143,  137,  132,  126,  121,
	 115,  110,  104,   99,   93,   88,   83,   78,
	  73,   68,   63,   58,   53,   49,   45,   41,
	  37,   33,   30,   26,   23,   21,   18,   16,
	  14,   12,   11,    9,    8,    8,    7,    7};
uint8_t triangle[] = {
	   7,   11,   14,   18,   21,   25,   28,   32,
	  35,   39,   42,   46,   49,   53,   57,   60,
	  64,   67,   71,   74,   78,   81,   85,   88,
	  92,   95,   99,  102,  106,  109,  113,  116,
	 120,  123,  127,  131,  134,  138,  141,  145,
	 148,  152,  155,  159,  162,  166,  169,  173,
	 176,  180,  183,  187,  190,  194,  198,  201,
	 205,  208,  212,  215,  219,  222,  226,  229,
	 229,  226,  222,  219,  215,  212,  208,  205,
	 201,  198,  194,  190,  187,  183,  180,  176,
	 173,  169,  166,  162,  159,  155,  152,  148,
	 145,  141,  138,  134,  131,  127,  123,  120,
	 116,  113,  109,  106,  102,   99,   95,   92,
	  88,   85,   81,   78,   74,   71,   67,   64,
	  60,   57,   53,   49,   46,   42,   39,   35,
	  32,   28,   25,   21,   18,   14,   11,    7 };
uint8_t square[] = {
		 255,  255,  255,  255,  255,  255,  255,  255,
		 255,  255,  255,  255,  255,  255,  255,  255,
		 255,  255,  255,  255,  255,  255,  255,  255,
		 255,  255,  255,  255,  255,  255,  255,  255,
		 255,  255,  255,  255,  255,  255,  255,  255,
		 255,  255,  255,  255,  255,  255,  255,  255,
		 255,  255,  255,  255,  255,  255,  255,  255,
		 255,  255,  255,  255,  255,  255,  255,  255,
		   7,    7,    7,    7,    7,    7,    7,    7,
		   7,    7,    7,    7,    7,    7,    7,    7,
		   7,    7,    7,    7,    7,    7,    7,    7,
		   7,    7,    7,    7,    7,    7,    7,    7,
		   7,    7,    7,    7,    7,    7,    7,    7,
		   7,    7,    7,    7,    7,    7,    7,    7,
		   7,    7,    7,    7,    7,    7,    7,    7,
		   7,    7,    7,    7,    7,    7,    7,    7 };
uint8_t sawL[] = {
		 229,  227,  226,  224,  222,  220,  219,  217,
		 215,  213,  212,  210,  208,  206,  205,  203,
		 201,  200,  198,  196,  194,  193,  191,  189,
		 187,  186,  184,  182,  180,  179,  177,  175,
		 173,  172,  170,  168,  166,  165,  163,  161,
		 159,  158,  156,  154,  152,  151,  149,  147,
		 145,  144,  142,  140,  138,  137,  135,  133,
		 131,  130,  128,  126,  124,  123,  121,  119,
		 117,  116,  114,  112,  110,  109,  107,  105,
		 103,  102,  100,   98,   96,   95,   93,   91,
		  89,   88,   86,   84,   82,   81,   79,   77,
		  75,   74,   72,   70,   68,   67,   65,   63,
		  61,   60,   58,   56,   54,   53,   51,   49,
		  47,   46,   44,   42,   40,   39,   37,   35,
		  33,   32,   30,   28,   26,   25,   23,   21,
		  19,   18,   16,   14,   12,   11,    9,    7 };
uint8_t sawT[] = {
	   7,    9,   11,   12,   14,   16,   18,   19,
	  21,   23,   25,   26,   28,   30,   32,   33,
	  35,   37,   39,   40,   42,   44,   46,   47,
	  49,   51,   53,   54,   56,   58,   60,   61,
	  63,   65,   67,   68,   70,   72,   74,   75,
	  77,   79,   81,   82,   84,   86,   88,   89,
	  91,   93,   95,   96,   98,  100,  102,  103,
	 105,  107,  109,  110,  112,  114,  116,  117,
	 119,  121,  123,  124,  126,  128,  130,  131,
	 133,  135,  137,  138,  140,  142,  144,  145,
	 147,  149,  151,  152,  154,  156,  158,  159,
	 161,  163,  165,  166,  168,  170,  172,  173,
	 175,  177,  179,  180,  182,  184,  186,  187,
	 189,  191,  193,  194,  196,  198,  200,  201,
	 203,  205,  206,  208,  210,  212,  213,  215,
	 217,  219,  220,  222,  224,  226,  227,  229 };

typedef struct{
	int key;        // Input key number
	char *name;     // Note name (e.g., "C4")
	uint8_t frequencyMultiplier; // how many times reference(10khz) is faster
}Note;

/*
    {0, "C4", 261.63},
    {1, "C#4", 277.18},
    {2, "D4", 293.66},
    {3, "D#4", 311.13},
    {4, "E4", 329.63},
    {5, "F4", 349.23},
    {6, "F#4", 369.99},
    {7, "G4", 392.00},
    {8, "G#4", 415.30},
    {9, "A4", 440.00},
    {10, "A#4", 466.16},
    {11, "B4", 493.88}
 */
Note noteMap[] = {
    {0, "C4", 32},
    {1, "C#4", 26},
    {2, "D4", 24},
    {3, "D#4", 23},
    {4, "E4", 22},
    {5, "F4", 21},
    {6, "F#4", 20},
    {7, "G4", 19},
    {8, "G#4", 18},
    {9, "A4", 17},
    {10, "A#4", 16},
    {11, "B4", 15}
 };

uint8_t *waveMap[] = {
		sine,
		triangle,
		square,
		sawL,
		sawT
};

void play(Note note, uint8_t *wave) {
	uint8_t *nextBuffer;
	uint8_t i = 0;
	if(currentBuffer == buffer0){
		nextBuffer = buffer1;
	}
	else{
		nextBuffer = buffer0;
	}

	for(uint8_t j =0; j < SIZE_OF_SAMPLE; j++){
		for(uint8_t k = 0; k < note.frequencyMultiplier; k++){
			nextBuffer[i++] = wave[j];
		}
	}

	playbackRate = i / 4;
	// toggle
	currentBuffer = nextBuffer;
}
//void play(uint8_t numKeys, uint8_t Keys, Wave *wave);
